package ca.csf.mobile2.tp2.question

import android.annotation.SuppressLint
import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import ca.csf.mobile2.tp2.R
import ca.csf.mobile2.tp2.databinding.ActivityAskQuestionBinding
import ca.csf.mobile2.tp2.question.viewModels.AskQuestionActivityViewModel
import com.google.android.material.snackbar.Snackbar
import kotlinx.android.synthetic.main.activity_ask_question.*
import okhttp3.ResponseBody
import org.androidannotations.annotations.*

@SuppressLint("Registered") //Reason : Generated by Android Annotations
@DataBound
@OptionsMenu(R.menu.activity_ask_question)
@EActivity(R.layout.activity_ask_question)
class AskQuestionActivity : AppCompatActivity() {

    @BindingObject
    protected lateinit var binding: ActivityAskQuestionBinding

    @InstanceState
    protected lateinit var viewModel: AskQuestionActivityViewModel

    @InstanceState
    protected lateinit var questionData: QuestionData

    @ViewById(R.id.toolbar)
    protected lateinit var toolbar: Toolbar

    @Bean
    protected lateinit var questionService: QuestionService


    @AfterViews
    protected fun onCreate() {
        initView()
        if (!this::viewModel.isInitialized) {
            questionData = QuestionData()
            viewModel =
                AskQuestionActivityViewModel(
                    questionData
                )
        }
        binding.viewModel = viewModel
        if (questionData.text == null) {
            questionService.findRandomQuestion(
                this::onSuccess,
                this::onServerError,
                this::onConnectivityError
            )
            viewModel.isLoading = true
        }
    }

    private fun initView() {
        setSupportActionBar(toolbar)
    }

    @Click(R.id.choice1Button)
    protected fun onClickResponseButtonChoose1() {
        questionService.choose1(
            questionData,
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
        viewModel.isLoading = true
    }

    @Click(R.id.choice1ResultBackground, R.id.choice2ResultBackground)
    protected fun onClickResultButton() {
        questionService.findRandomQuestion(
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
        viewModel.isLoading = true
    }

    @Click(R.id.choice2Button)
    protected fun onClickResponseButtonChoose2() {
        questionService.choose2(
            questionData,
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
        viewModel.isLoading = true
    }

    @Click(R.id.createButton)
    protected fun onClickCreateButton() {
        startActivity(Intent(this, CreateQuestionActivity_::class.java))
        viewModel.isLoading = true
    }

    @Click(R.id.retryButton)
    protected fun onClickRetryButton() {
        viewModel.isLoading = true
        questionService.findRandomQuestion(
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
    }

    @OptionsItem(R.id.flagButton)
    protected fun flag() {
        questionService.flagQuestion(
            questionData,
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
    }

    private fun onSuccess(question: QuestionData) {
        questionData = question
        viewModel.isLoading = false
        viewModel.questionData = question
        if (!viewModel.isAskingQuestion) {
            viewModel.isAskingQuestion = true
        } else {
            viewModel.isQuestionAnswered = true
        }
    }

    //Pour le flag qui a une réponse différente.
    private fun onSuccess(response: ResponseBody) {
        viewModel.isFlagging = true
        viewModel.isLoading = true

        if (response.string() == FLAG_RESPONSE) {
            Snackbar.make(rootView, R.string.text_reported, Snackbar.LENGTH_LONG).show()
        }

        questionService.findRandomQuestion(
            this::onSuccess,
            this::onServerError,
            this::onConnectivityError
        )
    }

    private fun onServerError() {
        viewModel.isLoading = false
        viewModel.isErrorDetected = true
    }

    private fun onConnectivityError() {
        viewModel.isLoading = false
        viewModel.isErrorDetected = true
        viewModel.isConnectivityErrorDetected = true
    }
}

private const val FLAG_RESPONSE: String = "OK"

